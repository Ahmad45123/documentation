---
title: Setting up Postgres
kind: documentation
description: Setting up Database Monitoring on a Postgres database
disable_sidebar: true
---

<div style="border: 5px solid red; padding: 10px">
PLACEHOLDER
<pre>
{{< site-region region="gov" >}}
<div class="alert alert-warning">Database Monitoring is not supported for this site.</div>
{{< /site-region >}}
</pre>
</div>

## Postgres versions supported

|  | Self-hosted | Amazon RDS | Amazon Aurora | Google Cloud SQL | Azure |
|--|------------|---------|------------|------------------|---------|
| Postgres 9.6 | {{< X >}} | {{< X >}} | {{< X >}} | {{< X >}} | {{< X >}} |
| Postgres 10 | {{< X >}} | {{< X >}} | {{< X >}} | {{< X >}} | {{< X >}} |
| Postgres 11 | {{< X >}} | {{< X >}} | {{< X >}} | {{< X >}} | {{< X >}} |
| Postgres 12 | {{< X >}} | {{< X >}} | {{< X >}} | {{< X >}} | {{< X >}} |
| Postgres 13 | {{< X >}} | {{< X >}} | {{< X >}} | {{< X >}} | {{< X >}} |
| Postgres 14 | {{< X >}} | {{< X >}} | {{< X >}} | {{< X >}} | {{< X >}} |
| Postgres 15 | {{< X >}} | {{< X >}} | {{< X >}} | {{< X >}} | {{< X >}} |
| Postgres 16 | {{< X >}} | {{< X >}} | {{< X >}} |  | {{< X >}} |

## Setup

Database Monitoring provides deep visibility into your Postgres databases by exposing query metrics, query samples, explain plans, database states, failovers, and events.

The Agent collects telemetry directly from the database by logging in as a read-only user.

### Before you begin

<!-- Azure supported PG versions -->
{% if equals($postgres_host, "azure") %}
Supported PostgreSQL versions
: 9.6, 10, 11, 12, 13, 14, 15
{% /if %}
<!-- Google Cloud SQL supported PG versions -->
{% if equals($postgres_host, "gcp") %}
Supported PostgreSQL versions
: 10, 11, 12, 13, 14, 15
{% /if %}
<!-- Supported PG versions for RDS, self-hosted, and Aurora -->
{% if or(
    equals($postgres_host, "rds"), 
    equals($postgres_host, "self-hosted"), 
    equals($postgres_host, "aurora")
    ) 
%}
Supported PostgreSQL versions
: 9.6, 10, 11, 12, 13, 14, 15, 16
{% /if %}

Supported Agent versions
: 7.36.1+

Performance impact
: The default Agent configuration for Database Monitoring is conservative, but you can adjust settings such as the collection interval and query sampling rate to better suit your needs. For most workloads, the Agent represents less than one percent of query execution time on the database and less than one percent of CPU. <br/><br/>
Database Monitoring runs as an integration on top of the base Agent ([see benchmarks][1]).

<!-- Every host except for Aurora -->
{% if not(equals($postgres_host, "aurora")) %}
Proxies, load balancers, and connection poolers
: The Datadog Agent must connect directly to the host being monitored. For self-hosted databases, `127.0.0.1` or the socket is preferred. The Agent should not connect to the database through a proxy, load balancer, or connection pooler such as `pgbouncer`. If the Agent connects to different hosts while it is running (as in the case of failover, load balancing, and so on), the Agent calculates the difference in statistics between two hosts, producing inaccurate metrics.
{% /if %}

<!-- Aurora only -->
{% if equals($postgres_host, "aurora") %}
Proxies, load balancers, and connection poolers
: The Datadog Agent must connect directly to the host being monitored. For self-hosted databases, `127.0.0.1` or the socket is preferred. The Agent should not connect to the database through a proxy, load balancer, connection pooler such as `pgbouncer`, or the **Aurora cluster endpoint**. If connected to the cluster endpoint, the Agent collects data from one random replica, and only provides visibility into that replica. If the Agent connects to different hosts while it is running (as in the case of failover, load balancing, and so on), the Agent calculates the difference in statistics between two hosts, producing inaccurate metrics.
{% /if %}

Data security considerations
: See [Sensitive information][2] for information about what data the Agent collects from your databases and how to ensure it is secure.

### Setup

Complete the following steps to enable Database Monitoring with your Postgres database:

<!-- Aurora -->

<!-- Azure -->

<!-- Google Cloud SQL -->

<!-- RDS -->

<!-- Self-hosted -->


## Setup - OLD
For setup instructions, select your hosting type:

<div style="border: 5px solid red; padding: 10px">
PLACEHOLDER
<pre>
{{< partial name="dbm/dbm-setup-postgres" >}}
</pre>
</div>

<br>

### Agent integration overhead

Agent integration overhead tests were run on an Amazon EC2 machine `c5.xlarge` instance (4 vCPUs, 8 GB RAM). The database used for the tests was a PostgreSQL 14.10 instance running on an Amazon RDS `db.m5.large` instance (2 vCPUs, 8 GB RAM). The database was running a TPC-C workload with 20 warehouses.

| Setting                           | Collection Interval |
| --------------------------------- | ------------------- |
| Check Min Collection Interval     | 15s                 |
| Query Metrics Collection Interval | 10s                 |
| Query Samples Collection Interval | 10s                 |
| Settings Collection Interval      | 600s                |
| Schema Collection Interval        | 600s                |

* Agent Test version: `7.50.2`
* CPU: ~1% of the CPU used on average
* Memory: ~300 MiB of RAM used (RSS memory)
* Network bandwidth: ~30 KB/s ▼ | 30 KB/s ▲
* Agent query overhead on database: ~1% CPU Time

[1]: /agent/basic_agent_usage#agent-overhead
[2]: /database_monitoring/data_collected/#sensitive-information
